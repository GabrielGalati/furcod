{"version":3,"sources":["componentes/Buscador.js","componentes/Imagen.js","componentes/Resultado.js","App.js","serviceWorker.js","index.js"],"names":["Buscador","busquedaRef","React","createRef","obtenerDatos","e","preventDefault","props","datosBusqueda","current","value","onSubmit","this","className","ref","type","placeholder","Component","Imagen","previewURL","imagen","src","Resultado","mostrarImagenes","imagenes","length","Fragment","map","key","id","App","state","termino","conApi","url","fetch","then","respuesta","json","resultado","setState","hits","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"0NA6CeA,G,kNAxCXC,YAAcC,IAAMC,Y,EAEpBC,aAAe,SAACC,GACZA,EAAEC,iBAIF,EAAKC,MAAMC,cAAc,EAAKP,YAAYQ,QAAQC,Q,uDAMlD,OAEI,0BAAMC,SAAUC,KAAKR,cACb,yBAAKS,UAAU,OAGX,yBAAKA,UAAU,wBAEX,2BAAOC,IAAKF,KAAKX,YAAac,KAAK,OAAOF,UAAU,+BACpDG,YAAY,YAGhB,yBAAKH,UAAU,wBACX,2BAAOE,KAAK,SAASF,UAAU,yC,GA5BpCI,cCkBRC,EAnBA,SAACX,GAAS,IAEdY,EAAcZ,EAAMa,OAApBD,WAGP,OACI,yBAAKN,UAAU,2CAEX,yBAAKA,UAAW,QACZ,yBAAMQ,IAAKF,EAAYN,UAAU,oBC2ClCS,E,4MAjDdC,gBAAkB,WAEf,IAAMC,EAAY,EAAKjB,MAAMiB,SAE7B,OAAuB,IAApBA,EAASC,OAAqB,KAG7B,kBAAC,IAAMC,SAAP,KACI,yBAAKb,UAAU,kBAMfW,EAASG,KAAI,SAAAP,GAAM,OAEhB,kBAAC,EAAD,CACAQ,IAAKR,EAAOS,GACZT,OAAQA,U,uDAoBf,OACI,kBAAC,IAAMM,SAAP,KACMd,KAAKW,uB,GA1CCN,aCmGTa,E,4MApFbC,MAAQ,CACNC,QAAS,GACTR,SAAU,I,EAGZS,OAAO,WACL,IAAMC,EAAM,qEAAqE,EAAKH,MAAMC,QAAQ,gBAepGG,MAAMD,GACLE,MAAK,SAAAC,GAAS,OAAIA,EAAUC,UAC5BF,MAAK,SAAAG,GAAS,OAAI,EAAKC,SAAS,CAAChB,SAAWe,EAAUE,W,EAYzDjC,cAAe,SAACwB,GACd,EAAKQ,SAAS,CACZR,YACA,WACA,EAAKC,a,uDAMP,OACE,yBAAKpB,UAAU,iBAEb,yBAAKA,UAAU,aAEf,uBAAGA,UAAU,oBAAb,mBAGF,kBAAC,EAAD,CAEAL,cAAeI,KAAKJ,iBAUxB,kBAAC,EAAD,CAEAgB,SAAYZ,KAAKmB,MAAMP,gB,GAzEPP,aCAEyB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBlB,MAAK,SAAAmB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.3abf4176.chunk.js","sourcesContent":["import React, {Component} from \"react\";\r\n\r\n\r\nclass Buscador extends Component{\r\n\r\n    busquedaRef = React.createRef();\r\n\r\n    obtenerDatos = (e)=> {\r\n        e.preventDefault(); // elimana la recarga de la pagina\r\n\r\n        // console.log(this.busquedaRef.current.value)\r\n            //enviar al componente principal\r\n        this.props.datosBusqueda(this.busquedaRef.current.value);\r\n\r\n\r\n    }\r\n\r\n    render(){\r\n        return(\r\n\r\n            <form onSubmit={this.obtenerDatos}>\r\n                    <div className=\"row\">\r\n\r\n                        {/* {this.props.mensaje} */}\r\n                        <div className=\"form-group  col-md-8\">\r\n\r\n                            <input ref={this.busquedaRef} type=\"text\" className=\"form-control form-control-lg\" \r\n                            placeholder=\"Buscar\"/>\r\n\r\n                        </div>\r\n                        <div className=\"form-group  col-md-4\">\r\n                            <input type=\"submit\" className=\"btn btn-lg btn-dark btn-block\" />\r\n\r\n                        </div>\r\n\r\n\r\n                    </div>\r\n            </form>\r\n\r\n\r\n\r\n        );\r\n    }\r\n}\r\n\r\nexport default Buscador;","import React from \"react\";\r\n\r\nconst Imagen = (props)=>{\r\n\r\n    const {previewURL} = props.imagen;\r\n\r\n\r\n    return(\r\n        <div className=\"col-12 col-sm-6 col-md-4 col-lg-3 mb-4>\" >\r\n\r\n            <div className= \"card\">\r\n                <img  src={previewURL} className=\"card-img-top\" />\r\n              \r\n            </div>\r\n\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\n\r\nexport default Imagen;","import React, {Component} from \"react\";\r\nimport Imagen from \"./Imagen\"\r\n\r\nclass Resultado extends Component{\r\n\r\n mostrarImagenes = ()=>{\r\n\r\n    const imagenes =  this.props.imagenes\r\n\r\n    if(imagenes.length === 0) return null;\r\n    \r\n    return(\r\n        <React.Fragment>\r\n            <div className='col-12 p-5 row' >\r\n\r\n       \r\n            \r\n\r\n\r\n           {imagenes.map(imagen=>(\r\n\r\n               <Imagen\r\n               key={imagen.id}\r\n               imagen={imagen}\r\n               \r\n               \r\n               />\r\n           ))}  \r\n           \r\n           \r\n        \r\n           \r\n            </div>\r\n\r\n\r\n        </React.Fragment>\r\n    )\r\n\r\n }\r\n    \r\n\r\n    render(){\r\n\r\n        return(     \r\n            <React.Fragment>\r\n                 {this.mostrarImagenes()}\r\n            </React.Fragment>\r\n        );\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\nexport default Resultado;","\r\n\r\nimport './App.css';\r\nimport React, {Component} from \"react\";\r\n\r\n\r\n\r\nimport Buscador from './componentes/Buscador';\r\nimport Resultado from './componentes/Resultado'\r\n\r\n\r\n\r\nclass App extends Component{\r\n\r\n\r\n\r\n\r\n\r\n  state = {\r\n    termino: \"\",\r\n    imagenes: []\r\n  }\r\n\r\n  conApi=() =>{ \r\n    const url = `https://pixabay.com/api/?key=15883836-757443b8923d74855848ed272&q=`+this.state.termino+\"&per_page=100\";\r\n    \r\n  //   {\r\n  //     // ...\r\n  //     form: {\r\n  //         login: \"YOUR_E621_USER_NAME\",\r\n  //         password_hash: \"YOUR_API_KEY\"\r\n  //     }\r\n  // }\r\n    // const url ='https://e621.net/post/index.json?limit=10/woler';\r\n\r\n    // const url2 = `https://e621.net/?key=Tsz9F1U5cooZxDpvfxFuhjtX&posts?tags=`+this.state.termino+`/woler`;\r\n\r\n  \r\n\r\n    fetch(url)\r\n    .then(respuesta => respuesta.json() ) \r\n    .then(resultado => this.setState({imagenes : resultado.hits} ))\r\n    \r\n\r\n\r\n    \r\n    \r\n\r\n  }\r\n\r\n\r\n\r\n\r\n  datosBusqueda= (termino)=>{\r\n    this.setState({\r\n      termino\r\n    },()=>{\r\n      this.conApi();\r\n    })\r\n  }\r\n\r\n\r\n  render(){\r\n    return (\r\n      <div className=\"app container\" >\r\n  \r\n        <div className=\"jumbotron\" >\r\n  \r\n        <p className=\"lead text-center\" >Buscador de img</p>\r\n  \r\n  \r\n      <Buscador\r\n      \r\n      datosBusqueda={this.datosBusqueda}\r\n      \r\n      />\r\n\r\n  \r\n  \r\n  \r\n      </div>\r\n\r\n        \r\n  <Resultado\r\n  \r\n  imagenes = {this.state.imagenes}\r\n\r\n  />\r\n\r\n\r\n      {/* {this.state.termino} */}\r\n      </div>\r\n\r\n  \r\n\r\n    );\r\n  }\r\n\r\n\r\n}\r\n\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}